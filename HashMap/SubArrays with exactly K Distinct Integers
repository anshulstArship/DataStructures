/* Given an integer array nums and an integer k, return the number of good subarrays of nums.

A good array is an array where the number of different integers in that array is exactly k.

For example, [1,2,3,1,2] has 3 different integers: 1, 2, and 3.
A subarray is a contiguous part of an array.
*/

class Solution {
    public int subarraysWithKDistinct(int[] nums, int k) {
        return findSubArray(nums,k)-findSubArray(nums,k-1);

        
    }

    public int findSubArray(int[] nums, int k){
        int n=nums.length;
        int count=0;
        HashMap<Integer,Integer> map = new HashMap<>();
        int start=0;
        int end=0;
        while(end<n){
           map.put(nums[end],map.getOrDefault(nums[end],0)+1);
           while(map.size()>k){
            map.put(nums[start],map.get(nums[start])-1);
            if(map.get(nums[start])==0){
                map.remove(nums[start]);
            }
            start++;
           }
           count+=end-start+1;
           end++;
        }
        return count;

    }
}

// Additional Tip - Number of subarrays in a range[start,end] = end-start+1
